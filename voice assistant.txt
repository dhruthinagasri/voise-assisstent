<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Voice Assistant</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f0f4f8;
      padding: 5vw;
      color: #333;
    }
    h1 {
      text-align: center;
      color: #2c3e50;
    }
    .container {
      max-width: 100%;
      margin: auto;
      background: #fff;
      padding: 5vw;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    input[type="file"], select, button {
      width: 100%;
      margin: 10px 0;
      padding: 12px;
      font-size: 1rem;
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 10px;
    }
    .controls button {
      flex: 1 1 45%;
      padding: 12px;
      font-size: 1rem;
    }
    .slider-group {
      display: flex;
      align-items: center;
      gap: 10px;
      flex-wrap: wrap;
      margin-top: 10px;
    }
    audio {
      width: 100%;
      margin-top: 20px;
    }
    .preview-box {
      text-align: center;
      margin: 20px auto;
      padding: 10px;
      border-radius: 50px;
      background: #f9f9f9;
      max-width: 90%;
    }
    .preview {
      font-size: 1.2rem;
      margin: 5px 0;
    }
    .current {
      font-size: 2rem;
      font-weight: bold;
      color: #2c3e50;
    }
    .faded {
      opacity: 0.5;
      color: #888;
    }
    .progress-pill {
      text-align: center;
      margin: 10px auto;
      padding: 10px 20px;
      border-radius: 50px;
      background: #e0f7fa;
      color: #00796b;
      font-weight: bold;
      max-width: 200px;
    }
    .progress-bar {
      width: 100%;
      height: 10px;
      background: #ddd;
      border-radius: 5px;
      overflow: hidden;
      margin-bottom: 20px;
    }
    .progress-fill {
      height: 100%;
      background: #00796b;
      width: 0%;
      transition: width 0.3s ease;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üéôÔ∏è Voice Assistant</h1>

    <input type="file" id="fileInput" accept=".txt" />
    <label for="voiceSelect">Voice:</label>
    <select id="voiceSelect"></select>

    <label for="rate">Rate:</label>
    <input type="range" id="rate" min="0.5" max="2" step="0.1" value="1" />
    <label for="pitch">Pitch:</label>
    <input type="range" id="pitch" min="0" max="2" step="0.1" value="1" />

    <div class="slider-group">
      <label for="stepDelay">‚è±Ô∏è Step Delay (sec):</label>
      <input type="range" id="stepDelay" min="1" max="10" step="1" value="3" />
      <span id="delayValue">3</span>s
    </div>

    <div class="controls">
      <button onclick="playAll()">‚ñ∂Ô∏è Play All</button>
      <button onclick="playStep()">‚è© Step</button>
      <button onclick="playPrevious()">‚èÆÔ∏è Previous</button>
      <button onclick="rewind()">‚è™ Rewind</button>
      <button onclick="pause()">‚è∏Ô∏è Pause</button>
      <button onclick="testVoice()">üó£Ô∏è Test Voice</button>
    </div>

    <div class="preview-box">
      <div class="preview faded" id="prevLine"></div>
      <div class="preview current" id="currentLine"></div>
      <div class="preview faded" id="nextLine"></div>
    </div>

    <div class="progress-pill" id="progressIndicator">0% completed</div>
    <div class="progress-bar"><div class="progress-fill" id="progressFill"></div></div>

    <h3>üîà Background Sound</h3>
    <button onclick="document.getElementById('bgAudio').play()">Start Background Sound</button>
    <audio id="bgAudio" loop>
      <source src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_7e6b3f5e3b.mp3?filename=white-noise-ambient-110397.mp3" type="audio/mpeg" />
    </audio>
    <label for="volumeControl">Volume:</label>
    <input type="range" id="volumeControl" min="0" max="1" step="0.01" value="0.3" />
  </div>

  <script>
    let instructions = [];
    let currentIndex = 0;
    let synth = window.speechSynthesis;
    let voices = [];
    let isPlayingAll = false;

    function loadVoices() {
      voices = synth.getVoices();
      const voiceSelect = document.getElementById("voiceSelect");
      voiceSelect.innerHTML = "";
      if (voices.length === 0) {
        alert("Voice selection may not work on this browser. Try using Chrome for full support.");
      }
      voices.forEach((voice, i) => {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = `${voice.name} (${voice.lang})`;
        voiceSelect.appendChild(option);
      });
    }

    window.speechSynthesis.onvoiceschanged = loadVoices;

    document.getElementById("fileInput").addEventListener("change", function () {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          instructions = e.target.result.split(/\r?\n/).filter(line => line.trim() !== "");
          currentIndex = 0;
          updatePreview();
          updateProgress();
          alert("Instructions loaded successfully!");
        };
        reader.readAsText(file);
      }
    });

    document.getElementById("stepDelay").addEventListener("input", function () {
      document.getElementById("delayValue").textContent = this.value;
    });

    document.getElementById("volumeControl").addEventListener("input", function () {
      document.getElementById("bgAudio").volume = this.value;
    });

    function updatePreview() {
      document.getElementById("prevLine").textContent = instructions[currentIndex - 1] || "";
      document.getElementById("currentLine").textContent = instructions[currentIndex] || "";
      document.getElementById("nextLine").textContent = instructions[currentIndex + 1] || "";
    }

    function updateProgress() {
      const percent = Math.floor((currentIndex / instructions.length) * 100);
      document.getElementById("progressIndicator").textContent = `${percent}% completed`;
      document.getElementById("progressFill").style.width = `${percent}%`;
    }

    function speak(text, callback) {
      synth.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      const voiceIndex = document.getElementById("voiceSelect").value;
      utterance.voice = voices[voiceIndex];
      utterance.rate = parseFloat(document.getElementById("rate").value);
      utterance.pitch = parseFloat(document.getElementById("pitch").value);
      utterance.onend = () => {
        if (callback) callback();
      };
      synth.speak(utterance);
    }

    function playAll() {
      if (instructions.length === 0 || currentIndex >= instructions.length) return;
      isPlayingAll = true;
      const delay = parseInt(document.getElementById("stepDelay").value) * 1000;
      speak(instructions[currentIndex], () => {
        currentIndex++;
        updatePreview();
        updateProgress();
        if (currentIndex < instructions.length && isPlayingAll) {
          setTimeout(playAll, delay);
        } else {
          isPlayingAll = false;
        }
      });
    }

    function playStep() {
      if (instructions.length === 0 || currentIndex >= instructions.length) return;
      speak(instructions[currentIndex]);
      currentIndex++;
      updatePreview();
      updateProgress();
    }

    function playPrevious() {
      if (instructions.length === 0 || currentIndex <= 0) return;
      currentIndex--;
      speak(instructions[currentIndex]);
      updatePreview();
      updateProgress();
    }

    function rewind() {
      currentIndex = 0;
      updatePreview();
      updateProgress();
      pause();
    }

    function pause() {
      synth.cancel();
      isPlayingAll = false;
    }

    function testVoice() {
      speak("Hello, this is a test of the selected voice and settings.");
    }

    // Initialize background audio volume
    document.getElementById("bgAudio").volume = document.getElementById("volumeControl").value;

    loadVoices();
  </script>
</body>
</html>